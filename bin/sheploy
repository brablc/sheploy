#!/usr/bin/env bash

SCRIPT_NAME=${0##*/}
SCRIPT_PATH=$(readlink -f $0)
LOGGER_USE_TS=1
source "${SCRIPT_PATH%/*}/logger.sh"

DEPLOYS=~/deploys
CONFIG_TYPES=(files tasks)

function usage() {
    exec 2<&1
    cat >&2 << __USAGE
Usage: $SCRIPT_NAME [OPTION] [CMD]

The tasks from all sources get sorted and then executed, use numeric prefixes to create stages.

Options:

  --help                  this help
  --verbose, -v           verbose mode
  --dry-run, -n           do not execute, use to list files and scripts
  --deploys-dir=DIR, -D   use other deploys DIR than $DEPLOYS
  --config-type=TYPE, -t  one of 'files' or 'tasks', when using prefix, tasks are assumed
  --prefix=STR, -p        only execute scripts matching the given prefix
  --host-filter=GREP, -h  only run on hosts matching the 'grep -P' filter
  --remote-debug, -x      execute tasks with bash -x

Commands:
  deploy                  default command
  collect                 copy changed files back, TIP: use git to check chnages
  exec CMD..              execute adhoc command (take advantage of host filter)
  init                    create scaffold of deploy directory structure
  link-role HOST ROLE     link a role to the host

Example:

  # Naming tasks
  010-apt-update
  011-apt-install
  410-backup-etc
  420-backup-var

  # Executing tasks
  $SCRIPT_NAME --dry-run                      # show complete deployments
  $SCRIPT_NAME --dry-run --config-type=files  # show available files
  $SCRIPT_NAME --dry-run --host-filter=cb-wrk # full setup of all matching hosts

  $SCRIPT_NAME --dry-run --prefix=01          # run all tasks with prefix 01
__USAGE

    exit 1
}

VERBOSE_FLAG=""
DRY_RUN_FLAG=""
REMOTE_DEBUG_FLAG=""
PREFIX=""
HOSTS=()

OPTIONS="$(getopt --long 'help,verbose,dry-run,remote-debug,deploys-dir,config-type:,prefix:,host-filter:' -n "$0" -- 'vnxD:t:p:h:' "$@")"
test $? -eq 0 || usage
eval set -- "$OPTIONS"
while true; do
    case $1 in
        --help )
            usage
            ;;
        -v | --verbose )
            VERBOSE_FLAG='-v'
            ;;
        -n | --dry-run )
            DRY_RUN_FLAG='--dry-run'
            ;;
        -x | --remote-debug )
            REMOTE_DEBUG_FLAG='-x'
            ;;
        -D | --deploys-dir )
            shift
            DEPLOYS=$1
            ;;
        -t | --config-type )
            shift
            CONFIG_TYPES=($1)
            ;;
        -p | --prefix )
            shift
            PREFIX="$1"
            CONFIG_TYPES=(tasks)
            ;;
        -h | --host-filter )
            shift
            HOSTS=($(ls -1 $DEPLOYS/hosts | grep -P "$1" ))
            ;;
        -- )
            shift
            break
            ;;
    esac
    shift
done

if [[ ${#HOSTS[@]} == 0 ]]; then
    HOSTS=($(ls -1 "$DEPLOYS/hosts"))
fi
test -d $DEPLOYS || ( log_error "Missing $DEPLOYS directory." && exit 1 )

HOST_DIR="$DEPLOYS/hosts"

COMMAND="deploy"
if (( $# )); then
    COMMAND="$1"
    shift
fi

function get_config_items() {
    local host config_type
    host=$1
    config_type=$2
    find -L $HOST_DIR/$host -mindepth 1 -path "*/$config_type*/*" -type f -printf '%P\n' | sort -V -k2 -t/
}

function deploy_host() {
    local host config_type
    host=$1

    for config_type in ${CONFIG_TYPES[@]}; do

        if [[ $config_type == 'files' ]]; then
            log_info "$host|Deploying files ..."
            while IFS=/ read dir real_path; do
                local local_path="$HOST_DIR/$host/$dir/$real_path"
                real_path="/$real_path"
                log_info "$host|$real_path ..."
                test -n "$DRY_RUN_FLAG" && echo "$local_path" && continue
                rsync -ai $VERBOSE_FLAG $DRY_RUN_FLAG --copy-links $local_path $host:$real_path
            done  < <(get_config_items $host files | grep -v .gitkeep)
        fi

        if [[ $config_type == 'tasks' ]]; then
            log_info "$host|Running tasks ..."
            while read command; do
                local local_path="$HOST_DIR/$host/$command"
                log_info "$host|$command"
                test -n "$DRY_RUN_FLAG" && echo "$local_path" && continue
                cat $local_path | ssh -T $host /bin/bash $VERBOSE_FLAG $REMOTE_DEBUG_FLAG
                local exit_code=$?
                if [[ $exit_code != 0 ]]; then
                    log_error "Command failed with $exit_code exit code. Local file $HOST_DIR/$host/$command"
                fi
            done  < <(get_config_items $host tasks | grep -P "/$PREFIX")
        fi

    done

}

function collect() {
    local host
    host=$1

    while IFS=/ read dir real_path; do
        local local_path="$HOST_DIR/$host/$dir/$real_path"
        real_path="/$real_path"
        log_info "$host|Checking file|$real_path ..."
        test -n "$DRY_RUN_FLAG" && continue

        read local_md5 name < <(md5sum $local_path)
        read remote_md5 name < <(ssh -T $host md5sum $real_path)
        if [[ $local_md5 != $remote_md5 ]]; then
            log_info "$host|File differs, copying content|$real_path"
            ssh -T $host cat $real_path > $local_path
        fi
    done  < <(get_config_items $host files)
}

if [[ $COMMAND == "collect" ]]; then
    test $# -eq 0 || usage

    for host in ${HOSTS[@]}; do
        collect $host
    done
    exit
fi

if [[ $COMMAND == "exec" ]]; then

    for host in ${HOSTS[@]}; do
        log_info "$host|Exec|${@}"
        test -n "$DRY_RUN_FLAG" && continue
        ssh -T $host -- "$@"
    done
    exit
fi

if [[ $COMMAND == "init" ]]; then
    test $# -eq 0 || usage

    mkdir -p $DEPLOYS
    pushd $DEPLOYS 2>&1 >/dev/null
    mkdir -vp hosts roles/any/{tasks-any,files-any} tasks files
    popd 2>&1 >/dev/null
    exit
fi

if [[ $COMMAND == "link-role" ]]; then
    test $# -eq 2 || usage

    host=$1
    role=$2

    pushd $DEPLOYS 2>&1 >/dev/null
    mkdir -pv hosts/$host/{tasks,files}
    test -d roles/$role/tasks-$role && ln -sfv ../../roles/$role/tasks-$role hosts/$host/
    test -d roles/$role/files-$role && ln -sfv ../../roles/$role/files-$role hosts/$host/
    popd 2>&1 >/dev/null
    exit
fi

if [[ $COMMAND == "deploy" ]]; then
    test $# -eq 0 || usage

    for host in ${HOSTS[@]}; do
        log_info "Deploying $host ..."
        deploy_host $host
    done
fi

log_error "Unknown command $COMMAND"
exit 1
